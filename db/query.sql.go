// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (username, password, email, created_on, last_login, first_name, last_name) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, username, password, email, created_on, last_login, first_name, last_name
`

type CreateUserParams struct {
	Username  string
	Password  string
	Email     string
	CreatedOn time.Time
	LastLogin time.Time
	FirstName string
	LastName  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.CreatedOn,
		arg.LastLogin,
		arg.FirstName,
		arg.LastName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreatedOn,
		&i.LastLogin,
		&i.FirstName,
		&i.LastName,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, email, created_on, last_login, first_name, last_name FROM "user" WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreatedOn,
		&i.LastLogin,
		&i.FirstName,
		&i.LastName,
	)
	return i, err
}
